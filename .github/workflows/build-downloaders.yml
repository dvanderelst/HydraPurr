# .github/workflows/build-downloaders.yml
name: Build Desktop Downloaders

on:
  # You can run it manually from the Actions tab
  workflow_dispatch: {}
  # Or automatically when pushing a tag like v1.2.3
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    # All 'run' commands below execute from this subfolder of your repo
    defaults:
      run:
        working-directory: BluetoothDownloader

    steps:
      # 1) Fetch your repo onto the runner VM
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2) Install Python (same version across OSes for reproducibility)
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # 3) (Optional) Install your app deps if a requirements.txt exists.
      #    '|| true' prevents failing the job if the file doesn't exist.
      - name: Install deps from requirements.txt (best-effort)
        run: |
          [ -f requirements.txt ] && pip install -r requirements.txt || true

      # 4) Ensure build tools are present (PyInstaller and pyserial)
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller pyserial

      # ---------- BUILD PER OS ----------
      # Windows build → produces dist/Downloader.exe
      - name: Build (Windows)
        if: runner.os == 'Windows'
        run: >
          pyinstaller
          --onefile
          --name Downloader
          --add-data "library;library"
          --hidden-import serial
          --hidden-import serial.tools.list_ports
          Downloader.py

      # macOS build (universal2 = Intel + Apple Silicon in one binary)
      # → produces dist/Downloader
      - name: Build (macOS)
        if: runner.os == 'macOS'
        run: >
          pyinstaller
          --onefile
          --target-arch universal2
          --name Downloader
          --add-data "library:library"
          --hidden-import serial
          --hidden-import serial.tools.list_ports
          Downloader.py

      # Linux build → produces dist/Downloader
      - name: Build (Linux)
        if: runner.os == 'Linux'
        run: >
          pyinstaller
          --onefile
          --name Downloader
          --add-data "library:library"
          --hidden-import serial
          --hidden-import serial.tools.list_ports
          Downloader.py

      # ---------- LAUNCHERS & PACKAGING ----------
      # macOS: add a .command launcher that opens Terminal and runs your CLI
      # then zip both files for download.
      - name: Create double-click launcher (macOS)
        if: runner.os == 'macOS'
        run: |
          cat > dist/Downloader.command << 'EOF'
          #!/bin/sh
          DIR="$(cd "$(dirname "$0")" && pwd)"
          open -a Terminal "$DIR/Downloader"
          EOF
          chmod +x dist/Downloader dist/Downloader.command
          (cd dist && zip -9 -j Downloader-macOS.zip Downloader Downloader.command)

      # Windows: add a .bat that opens a cmd window and runs the exe
      # then zip both files for download.
      - name: Create double-click launcher (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          echo @echo off> dist\Downloader.bat
          echo set DIR=%%~dp0>> dist\Downloader.bat
          echo start cmd /k "%%DIR%%Downloader.exe">> dist\Downloader.bat

      - name: Package (Windows zip)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Compress-Archive -Path dist/Downloader.exe, dist/Downloader.bat `
                           -DestinationPath dist/Downloader-Windows.zip -Force

      # Linux: add a .sh launcher (tries to open a terminal; falls back to exec)
      # and a .desktop entry. Package as tar.gz to preserve executable bits.
      - name: Create double-click launcher (Linux)
        if: runner.os == 'Linux'
        run: |
          cat > dist/Downloader.sh << 'EOF'
          #!/usr/bin/env bash
          DIR="$(cd "$(dirname "$0")" && pwd)"
          for T in "x-terminal-emulator -e" "gnome-terminal --" "konsole -e" "xfce4-terminal -e" "xterm -e"; do
            BIN=${T%% *}
            if command -v $BIN >/dev/null 2>&1; then
              exec $T "$DIR/Downloader"
            fi
          done
          exec "$DIR/Downloader"
          EOF
          chmod +x dist/Downloader dist/Downloader.sh

          cat > dist/Downloader.desktop << 'EOF'
          [Desktop Entry]
          Type=Application
          Name=Downloader
          Comment=HydraPurr Bluetooth Downloader
          Exec=sh -c '"$PWD/Downloader.sh"'
          Icon=utilities-terminal
          Terminal=false
          Categories=Utility;
          EOF

          (cd dist && tar -czf Downloader-linux.tar.gz Downloader Downloader.sh Downloader.desktop)

      # ---------- UPLOAD ARTIFACTS (one per OS) ----------
      - name: Upload artifact (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: Downloader-Windows
          path: BluetoothDownloader/dist/Downloader-Windows.zip

      - name: Upload artifact (macOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: Downloader-macOS
          path: BluetoothDownloader/dist/Downloader-macOS.zip

      - name: Upload artifact (Linux)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: Downloader-Linux
          path: BluetoothDownloader/dist/Downloader-linux.tar.gz
